package networking;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketConfig;
import com.corundumstudio.socketio.SocketIONamespace;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.SocketIOClient;

import networking.chat.ChatMessage;
import networking.chat.ChatUser;

import java.util.*;
/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'andreas' at '8/12/16 4:39 AM' with Gradle 2.6
 *
 * @author andreas, @date 8/12/16 4:39 AM
 */
public class Server {
	private static final Logger log = LoggerFactory.getLogger(Server.class);
	private SocketIOServer socketServer;
	private Matcher matcher;
	
	public Server(Configuration config) {

    	socketServer = new SocketIOServer(config);
    	matcher = new Matcher();
    	
    	SocketIONamespace chatNamespace = socketServer.addNamespace("/chat");
    	
    	log.info("Created namespace: {}", chatNamespace.getName());
    	
    	chatNamespace.addConnectListener(client -> {
			log.info("Connection from {} to {}", client.getRemoteAddress(), chatNamespace.getName());
		});
    	
    	chatNamespace.addDisconnectListener(client -> {
			log.info("{} disconnected from namespace {}", client.getRemoteAddress(), chatNamespace.getName());
		});
    	
    	// Handle register requests
    	chatNamespace.addEventListener("register", ChatUser.class, (client, data, ackSender) -> {
    		client.set("userData", data);
    		client.set("registered", true);

            log.info("Registration from {}: {}, {}, {}", client.getRemoteAddress(), data.getName(), data.getAge(), data.getGender());
    		
            // Attempt to match the client
            matcher.match(client);
        });
        
        // Typing events
        chatNamespace.addEventListener("isTyping", Boolean.class, (client, data, ackSender) -> {
            SocketIOClient matchedClient = matcher.getMatchedClient(client);
            
            if(matchedClient != null) {
                matchedClient.sendEvent("isTyping", data);
            }
            else {
                ChatUser user = client.get("userData");
                log.error("Could not find matched client for username: {}", user.getName());  
            }
        });
    	// TODO
    	// Handle leaveroom requests
    	chatNamespace.addEventListener("leaveroom", String.class, (client, data, ackSender) -> {
    		client.leaveRoom(data);
    		log.info("{} left room {}", ((ChatUser)client.get("userData")).getName(), data);
    		
		});
    	
    	// Handle messages
    	chatNamespace.addEventListener("message", ChatMessage.class, (client, data, ackSender) -> {
            //Check if client is registred
    		if(client.get("registered") != null) {
    			//Got the message
                //FIXME maybe there is a better way to get the roomID
                //FIXME catch get empty room
                List<String> allRoomsList = new ArrayList<>(client.getAllRooms());
                String room = allRoomsList.get(0);                
                
				if(room != null) {
                    log.info("Recieved message from {}: {} to forward in room: {}", data.getUsername(), data.getMessage(), room);

					chatNamespace.getRoomOperations(room).sendEvent("message", data);
					client.sendEvent("message", data);
				} 
                else {
					log.error("Client is not subscribed in a room: {}",  client.getRemoteAddress());
                    //client.sendEvent("error", "Room not found");
				}
            }
            else {
    	        log.error("Client attempted to send message when not registered: {}", client.getRemoteAddress());
    			client.sendEvent("error", "Not registered");
	        }
		});

        // Probably not needed anymore    	
    	// Handle joinroom requests
    	chatNamespace.addEventListener("joinroom", String.class, (client, data, ackSender) -> {
    		if(client.get("registered") == null) {
    			log.error("Client attempted to join room when not registered: {}", client.getRemoteAddress());
    			client.sendEvent("error", "Not registered");
    		} else {

				String oldroom = client.get("room");
				if(oldroom != null) {
					client.leaveRoom(oldroom);
				}
                
				client.set("room", data);
				client.joinRoom(data);
				
				ChatUser userData = client.get("userData");
				log.info("{} requested to join room {}", userData.getName(), data);
				chatNamespace.getRoomOperations(data).sendEvent("message", new ChatMessage(userData.getName(), "joined the room"));
    		}
		});	
	}

	public void start() {
		socketServer.start();
	}
	
	
    public static void main(String[] args) {
		Configuration config = new Configuration();
    	config.setPort(6969);

    	SocketConfig socketConfig = new SocketConfig();
    	socketConfig.setReuseAddress(true);
    	config.setSocketConfig(socketConfig);
    	
    	Server chatServer = new Server(config);
    	chatServer.start();
    	
	}
}
