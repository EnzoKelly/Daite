package networking;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketConfig;
import com.corundumstudio.socketio.SocketIONamespace;
import com.corundumstudio.socketio.SocketIOServer;

import networking.chat.ChatMessage;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'andreas' at '8/12/16 4:39 AM' with Gradle 2.6
 *
 * @author andreas, @date 8/12/16 4:39 AM
 */
public class Server {
	private static final Logger log = LoggerFactory.getLogger(Server.class);
	private SocketIOServer socketServer;
	
	public Server(Configuration config) {

    	socketServer = new SocketIOServer(config);
    	
    	SocketIONamespace chatNamespace = socketServer.addNamespace("/chat");
    	
    	log.info(String.format("Created namespace: %s", chatNamespace.getName()));
    	
    	chatNamespace.addConnectListener(client -> {
			log.info(String.format("Connection from %s to %s", client.getRemoteAddress(), chatNamespace.getName()));
		});
    	
    	chatNamespace.addDisconnectListener(client -> {
			log.info(String.format("%s disconnected from namespace %s", client.getRemoteAddress(), chatNamespace.getName()));
		});
    	
    	// Handle joinroom requests
    	chatNamespace.addEventListener("joinroom", String.class, (client, data, ackSender) -> {
			String oldroom = client.get("room");
			if(oldroom != null) {
				client.leaveRoom(oldroom);
			}
			
			client.set("room", data);
			client.joinRoom(data);
			
			chatNamespace.getRoomOperations(data).sendEvent("message", new ChatMessage("user", "joined the room"));
		});
    	
    	// Handle messages
    	// TODO: decide on correct way to handle rooms
    	chatNamespace.addEventListener("message", ChatMessage.class, (client, data, ackSender) -> {
			log.info(String.format("Recieved message from %s: %s", data.getUsername(), data.getMessage()));
			String room = client.get("room");
			if(room != null) {
				chatNamespace.getRoomOperations(room).sendEvent("message", data);
				client.sendEvent("message", data);
			} else {
				log.error("Client isn't in a room: " + client.getRemoteAddress());
			}
		});
    	
	}

	public void start() {
		socketServer.start();
	}
	
	
    public static void main(String[] args) {
    	
		Configuration config = new Configuration();
    	config.setPort(6969);
    	SocketConfig socketConfig = new SocketConfig();
    	socketConfig.setReuseAddress(true);
    	config.setSocketConfig(socketConfig);
    	
    	Server chatServer = new Server(config);
    	chatServer.start();
    	
	}
}
